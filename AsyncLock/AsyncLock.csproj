<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard1.3;net45</TargetFrameworks>
    <RootNamespace>NeoSmart.AsyncLock</RootNamespace>
    <AssemblyName>NeoSmart.AsyncLock</AssemblyName>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Version>0.2</Version>
    <Authors>NeoSmart Technologies, Mahmoud Al-Qudsi</Authors>
    <Company>NeoSmart Technologies</Company>
    <Product>NeoSmart.AsyncLock</Product>
    <Description>A C# lock replacement for async/await, supporting recursion/re-entrance and asynchronous waits.</Description>
    <Copyright>Copyright NeoSmart Technologies 2017</Copyright>
    <PackageLicenseUrl>https://cdn.rawgit.com/neosmart/AsyncLock/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/neosmart/AsyncLock</PackageProjectUrl>
    <RepositoryUrl>https://github.com/neosmart/AsyncLock</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>asynclock, async await, async, await, lock, synchronization</PackageTags>
    <PackageReleaseNotes>* Fixed thread id conflicts when awaiting on Task.Delay
* AsyncLock.ThreadId can be used from within tasks to get a unique identifier
* Full .NET Framework uses faster/more-reliable binary stack trace comparison</PackageReleaseNotes>
    <AssemblyVersion>0.2.0.0</AssemblyVersion>
    <FileVersion>0.2.0.0</FileVersion>
  </PropertyGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard1.3'">
    <PackageReference Include="System.Reflection" Version="4.3.0" />
    <PackageReference Include="System.Diagnostics.StackTrace">
      <Version>4.3.0</Version>
    </PackageReference>
  </ItemGroup>

</Project>